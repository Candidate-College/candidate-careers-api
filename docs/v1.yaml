openapi: 3.0.4
info:
  title: Candidate Careers API Documentation
  description: REST API Documentation for Candidate Careers Application
  version: 1.0.0

servers:
  - url: http://localhost:3001/api/v1
    description: Local development server
  - url: https://careers.candidatecollege.org/api/v1
    description: Remote production server

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered

  /roles:
    post:
      summary: Create a role
      tags: [Roles]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleCreate'
      responses:
        '201': { description: Role created }
    get:
      summary: List roles
      tags: [Roles]
      parameters:
        - in: query
          name: page
          schema: { type: integer }
      responses:
        '200': { description: Paginated list of roles }

  /roles/{id}:
    patch:
      summary: Update role
      tags: [Roles]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RoleUpdate' }
      responses:
        '200': { description: Role updated }
    delete:
      summary: Delete role
      tags: [Roles]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Role deleted }

  /roles/{id}/permissions:
    post:
      summary: Bulk assign permissions to role
      tags: [RolePermissions]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permissionIds:
                  type: array
                  items: { type: integer }
      responses:
        '200': { description: Permissions assigned }

  /roles/{id}/permissions/{permId}:
    delete:
      summary: Revoke permission from role
      tags: [RolePermissions]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: path
          name: permId
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Permission revoked }

  /users/{id}/roles:
    post:
      summary: Assign roles to user
      tags: [UserRoles]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roleIds:
                  type: array
                  items: { type: integer }
      responses:
        '200': { description: Roles assigned }

  /users/{id}/roles/{roleId}:
    delete:
      summary: Revoke role from user
      tags: [UserRoles]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: path
          name: roleId
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Role revoked }
    post:
      summary: Register a new user
      # description: hello
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid input

  /admin/users:
    get:
      summary: List users (Super Admin only)
      tags: [UserManagement]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20, maximum: 100 }
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: role_id
          schema: { type: integer }
        - in: query
          name: status
          schema: { type: string, enum: [active, inactive, suspended] }
        - in: query
          name: sort_by
          schema: { type: string, enum: [name, email, created_at, last_login_at] }
        - in: query
          name: sort_order
          schema: { type: string, enum: [asc, desc], default: desc }
        - in: query
          name: created_from
          schema: { type: string, format: date-time }
        - in: query
          name: created_to
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
    post:
      summary: Create user (Super Admin only)
      tags: [UserManagement]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'

  /admin/users/{uuid}:
    get:
      summary: Get user detail (Super Admin only)
      tags: [UserManagement]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: uuid
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailResponse'
    put:
      summary: Update user (Super Admin only)
      tags: [UserManagement]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: uuid
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailResponse'
    delete:
      summary: Delete user (Super Admin only, soft delete)
      tags: [UserManagement]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: uuid
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDeleteRequest'
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDeleteResponse'

  /admin/users/bulk:
    post:
      summary: Bulk user operations (Super Admin only)
      tags: [UserManagement]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBulkOperationRequest'
      responses:
        '200':
          description: Bulk operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBulkOperationResponse'

  /admin/users/{uuid}/reset-password:
    post:
      summary: Reset user password (Super Admin only)
      tags: [UserManagement]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: uuid
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResetPasswordRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResetPasswordResponse'

  /admin/users/{uuid}/impersonate:
    post:
      summary: Impersonate user (Super Admin only)
      tags: [UserManagement]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: uuid
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserImpersonateRequest'
      responses:
        '200':
          description: Impersonation started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserImpersonateResponse'

  /admin/users/search:
    get:
      summary: Advanced user search (Super Admin only)
      tags: [UserManagement]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: filters
          schema: { type: object }
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: limit
          schema: { type: integer }
        - in: query
          name: sort_by
          schema: { type: string }
        - in: query
          name: sort_order
          schema: { type: string }
      responses:
        '200':
          description: Users found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'

  /admin/users/search/suggestions:
    get:
      summary: Get user search suggestions (Super Admin only)
      tags: [UserManagement]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer }
      responses:
        '200':
          description: Search suggestions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSearchSuggestionsResponse'

  /admin/users/statistics:
    get:
      summary: Get user statistics (Super Admin only)
      tags: [UserManagement]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatisticsResponse'

  /jobs:
    post:
      summary: Create Job Posting
      tags: [Jobs]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobCreateRequest'
      responses:
        '201':
          description: Job posting created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobCreateResponse'
        '401':
          description: Job Posting not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobCreateUnauthorizedResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserListResponse:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/UserSummary'
            pagination:
              $ref: '#/components/schemas/Pagination'
            filters:
              type: object
    UserSummary:
      type: object
      properties:
        id: { type: integer }
        uuid: { type: string, format: uuid }
        email: { type: string }
        name: { type: string }
        role:
          type: object
          properties:
            id: { type: integer }
            name: { type: string }
            display_name: { type: string }
        status: { type: string }
        email_verified_at: { type: string, format: date-time }
        last_login_at: { type: string, format: date-time }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    Pagination:
      type: object
      properties:
        total: { type: integer }
        per_page: { type: integer }
        current_page: { type: integer }
        total_pages: { type: integer }
        has_next: { type: boolean }
        has_prev: { type: boolean }
    UserCreateRequest:
      type: object
      required: [email, name, role_id]
      properties:
        email: { type: string, format: email }
        name: { type: string, minLength: 2, maxLength: 100 }
        role_id: { type: integer }
        password: { type: string, minLength: 8, maxLength: 128 }
        send_welcome_email: { type: boolean, default: true }
        require_password_change: { type: boolean, default: true }
    UserCreateResponse:
      type: object
      properties:
        status: { type: integer }
        message: { type: string }
        data:
          type: object
          properties:
            id: { type: integer }
            uuid: { type: string, format: uuid }
            email: { type: string }
            name: { type: string }
            role: { $ref: '#/components/schemas/UserRole' }
            status: { type: string }
            temporary_password: { type: string }
            email_verification_sent: { type: boolean }
            created_at: { type: string, format: date-time }
    UserRole:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        display_name: { type: string }
    UserDetailResponse:
      type: object
      properties:
        status: { type: integer }
        message: { type: string }
        data:
          type: object
          properties:
            id: { type: integer }
            uuid: { type: string, format: uuid }
            email: { type: string }
            name: { type: string }
            role:
              type: object
              properties:
                id: { type: integer }
                name: { type: string }
                display_name: { type: string }
                permissions:
                  type: array
                  items: { type: string }
            status: { type: string }
            email_verified_at: { type: string, format: date-time }
            last_login_at: { type: string, format: date-time }
            login_attempts:
              type: object
              properties:
                failed_attempts: { type: integer }
                last_attempt: { type: string, format: date-time }
                is_locked: { type: boolean }
            activity_summary:
              type: object
              properties:
                total_logins: { type: integer }
                last_activity: { type: string, format: date-time }
                recent_actions:
                  type: array
                  items: { type: string }
            created_at: { type: string, format: date-time }
            updated_at: { type: string, format: date-time }
            deleted_at: { type: string, format: date-time }
    UserUpdateRequest:
      type: object
      properties:
        name: { type: string, minLength: 2, maxLength: 100 }
        role_id: { type: integer }
        status: { type: string, enum: [active, inactive, suspended] }
        send_notification: { type: boolean, default: true }
    UserDeleteRequest:
      type: object
      required: [confirmation]
      properties:
        confirmation: { type: string, enum: [DELETE] }
        reason: { type: string, maxLength: 500 }
        permanent: { type: boolean }
    UserDeleteResponse:
      type: object
      properties:
        status: { type: integer }
        message: { type: string }
        data:
          type: object
          properties:
            success: { type: boolean }
            deletedCount: { type: integer }
    UserBulkOperationRequest:
      type: object
      required: [action, user_uuids]
      properties:
        action: { type: string, enum: [activate, deactivate, delete, change_role, suspend] }
        user_uuids:
          type: array
          items: { type: string, format: uuid }
        params:
          type: object
          properties:
            role_id: { type: integer }
            send_notification: { type: boolean }
            reason: { type: string, maxLength: 500 }
    UserBulkOperationResponse:
      type: object
      properties:
        status: { type: integer }
        message: { type: string }
        data:
          type: object
          properties:
            success: { type: boolean }
            affectedCount: { type: integer }
    UserResetPasswordRequest:
      type: object
      properties:
        generate_temporary: { type: boolean, default: true }
        send_email: { type: boolean, default: true }
        require_change: { type: boolean, default: true }
        new_password: { type: string, minLength: 8, maxLength: 128 }
    UserResetPasswordResponse:
      type: object
      properties:
        status: { type: integer }
        message: { type: string }
        data:
          type: object
          properties:
            success: { type: boolean }
            temporaryPassword: { type: string }
    UserImpersonateRequest:
      type: object
      properties:
        duration_minutes: { type: integer, minimum: 5, maximum: 480 }
        reason: { type: string, maxLength: 500 }
        notify_user: { type: boolean }
    UserImpersonateResponse:
      type: object
      properties:
        status: { type: integer }
        message: { type: string }
        data:
          type: object
          properties:
            token: { type: string }
            expiresAt: { type: string, format: date-time }
            adminId: { type: integer }
            targetUserId: { type: integer }
            targetUserUuid: { type: string, format: uuid }
            reason: { type: string }
            access_token: { type: string }
    UserSearchSuggestionsResponse:
      type: object
      properties:
        status: { type: integer }
        message: { type: string }
        data:
          type: object
          properties:
            suggestions:
              type: array
              items:
                type: object
                properties:
                  value: { type: string }
                  type: { type: string, enum: [name, email, domain] }
                  count: { type: integer }
    UserStatisticsResponse:
      type: object
      properties:
        status: { type: integer }
        message: { type: string }
        data:
          type: object
          properties:
            statistics:
              type: object
              properties:
                total_users: { type: integer }
                active_users: { type: integer }
                inactive_users: { type: integer }
                suspended_users: { type: integer }
                verified_users: { type: integer }
                users_by_role:
                  type: array
                  items:
                    type: object
                    properties:
                      role_name: { type: string }
                      count: { type: integer }
                recent_signups: { type: integer }
                avg_login_frequency: { type: integer }
    JobCreateRequest:
      type: object
      description: Payload for creating or updating a job posting.
      required:
        - title
        - department_id
        - job_category_id
        - job_type
        - employment_level
        - description
        - requirements
        - responsibilities
      properties:
        title:
          type: string
          description: The title of the job position.
          example: 'Senior Backend Developer'
        department_id:
          type: integer
          description: The unique identifier for the department this job belongs to.
          example: 42
        job_category_id:
          type: integer
          description: The unique identifier for the job category (e.g., Engineering, Marketing).
          example: 15
        job_type:
          type: string
          description: |
            The type of employment.
            * `internship` - Internship position.
            * `staff` - Permanent staff position.
            * `freelance` - Freelance or project-based work.
            * `contract` - A fixed-term contract position.
          enum:
            - internship
            - staff
            - freelance
            - contract
        employment_level:
          type: string
          description: The seniority level required for the job.
          enum:
            - entry
            - junior
            - mid
            - senior
            - lead
            - head
            - co_head
        priority_level:
          type: string
          description: The priority of the hiring need. Defaults to 'normal' if not specified.
          enum:
            - normal
            - urgent
          default: normal
        description:
          type: string
          description: A detailed description of the job and the role.
          minLength: 50
          maxLength: 10000
        requirements:
          type: string
          description: The skills, qualifications, and experience required for the role.
          minLength: 20
          maxLength: 5000
        responsibilities:
          type: string
          description: The key responsibilities and day-to-day tasks for the role.
          minLength: 20
          maxLength: 5000
        benefits:
          type: string
          description: 'Optional: A list of benefits provided with the job (e.g., health insurance, remote work options).'
          maxLength: 3000
        team_info:
          type: string
          description: 'Optional: Information about the team the candidate will be joining.'
          maxLength: 2000
        status:
          type: string
          description: The visibility status of the job posting. Defaults to 'draft' if not specified.
          enum:
            - draft
            - published
          default: draft
        application_deadline:
          type: string
          format: date-time
          description: 'Optional: The timestamp for when applications will close. (ISO 8601 format)'
          example: '2025-09-30T23:59:59Z'
        max_applications:
          type: integer
          description: 'Optional: The maximum number of applications to accept before automatically closing the job.'
          example: 150
    JobCreateResponse:
      type: object
      properties:
        status:
          type: integer
          description: The HTTP status code of the response.
          example: 201
        message:
          type: string
          description: A human-readable message indicating the result.
          example: 'Job posting created successfully'
        data:
          $ref: '#/components/schemas/JobPostingResource'
    JobPostingResource:
      type: object
      description: Contains the detailed information for a single job posting.
      properties:
        id:
          type: integer
          description: The internal primary key of the job posting.
          example: 61
        uuid:
          type: string
          format: uuid
          description: The unique public identifier for the job posting.
          example: 'b5f51084-3b59-42e2-acca-97cbc926f16a'
        title:
          type: string
          description: The title of the job position.
          example: 'Senior Backend Developer'
        slug:
          type: string
          description: A URL-friendly version of the title.
          example: 'senior-backend-developer'
        department_id:
          type: integer
          description: The ID of the associated department.
          example: 42
        job_category_id:
          type: integer
          description: The ID of the associated job category.
          example: 15
        job_type:
          type: string
          description: The type of employment (e.g., internship, staff).
          example: 'internship'
        employment_level:
          type: string
          description: The required seniority level (e.g., entry, mid, senior).
          example: 'entry'
        priority_level:
          type: string
          description: The hiring priority for the role.
          example: 'normal'
        description:
          type: string
          description: A detailed description of the job.
        requirements:
          type: string
          description: The skills and qualifications required.
        responsibilities:
          type: string
          description: The key responsibilities for the role.
        benefits:
          type: string
          nullable: true
          description: A summary of the benefits offered.
        team_info:
          type: string
          nullable: true
          description: Information about the team.
        status:
          type: string
          description: The current status of the job posting.
          example: 'draft'
        views_count:
          type: integer
          description: The number of times the job posting has been viewed.
          example: 0
        applications_count:
          type: integer
          description: The number of applications received.
          example: 0
        application_deadline:
          type: string
          format: date-time
          nullable: true
          description: The deadline for submitting applications.
          example: '2025-08-30T17:00:00.000Z'
        max_applications:
          type: integer
          nullable: true
          description: Maximum number of applications to accept.
          example: 150
        published_at:
          type: string
          format: date-time
          nullable: true
          description: The timestamp when the job was published. Null if in draft.
          example: null
        created_by:
          type: integer
          description: The ID of the user who created the posting.
          example: 17
        created_at:
          type: string
          format: date-time
          description: The timestamp when the record was created.
          example: '2025-07-23T07:18:38.604Z'
        updated_at:
          type: string
          format: date-time
          description: The timestamp when the record was last updated.
          example: '2025-07-23T07:18:38.604Z'
    JobCreateUnauthorizedResponse:
      type: object
      description: Contains the detailed information for an unauthorized user for create a Job.
      properties:
        statusCode:
          type: integer
          description: Status Code for unauthorized User
          example: 401
        message:
          type: string
          description: Message for unauthorized User
          example: Token has expired
        error:
          type: object
          properties:
            category:
              type: string
              example: AUTHENTICATION
            type:
              type: string
              example: EXPIRED_TOKEN
            code:
              type: string
              example: AUTHENTICATION_EXPIRED_TOKEN
            retryable:
              type: boolean
              example: true
