# name: Build and Push to Production

# on:
#   push:
#     branches: [ main ]
#   workflow_dispatch:

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout repo
#       uses: actions/checkout@v3

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3

#     - name: Log in to Docker Hub
#       uses: docker/login-action@v3
#       with:
#         username: ${{ secrets.DOCKERHUB_USERNAME }}
#         password: ${{ secrets.DOCKERHUB_TOKEN }}

#     - name: Build and push api image
#       uses: docker/build-push-action@v5
#       with:
#         context: ./
#         file: ./docker/api/Dockerfile
#         push: true
#         tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_APP_ID }}:prod
#         no-cache: true

#     - name: Create .env file from secrets
#       uses: 0ndt/envfile@v2
#       with:
#         secrets: ${{ toJSON(secrets) }}
#         exclude: DEPLOYMENT_*, STAGING_*, DEV_*
    
#     - name: Upload .env to VPS
#       uses: appleboy/scp-action@v0.1.7
#       with:
#         host: ${{ secrets.DEPLOYMENT_HOST }}
#         port: ${{ secrets.DEPLOYMENT_PORT }}
#         username: ${{ secrets.DEPLOYMENT_USER }}
#         key: |
#           ${{ secrets.DEPLOYMENT_SSH_KEY }}
#         source: ".env"
#         target: "/opt/${{ secrets.DOCKERHUB_APP_ID }}/production"
    
#     - name: Deploy to VPS
#       uses: appleboy/ssh-action@v1.0.0
#       with:
#         host: ${{ secrets.DEPLOYMENT_HOST }}
#         port: ${{ secrets.DEPLOYMENT_PORT }}
#         username: ${{ secrets.DEPLOYMENT_USER }}
#         key: |
#           ${{ secrets.DEPLOYMENT_SSH_KEY }}
#         script: |
#           cd /opt/${{ secrets.DOCKERHUB_APP_ID }}/production
#           git fetch origin
#           git reset --hard origin/main
#           git clean -fd

#           # Remove prefix
#           sed -i 's/^PRODUCTION_//g' .env

#           # Re-run container (clean)
#           docker-compose -p ${{ secrets.DOCKERHUB_APP_ID }}-prod -f docker-compose.yml -f docker-compose.prod.yml up -d --force-recreate --pull always
#           docker system prune -af

#     # Automate database migration
#     - name: Use Node.js for database migrations
#       uses: actions/setup-node@v3
#       with:
#         node-version: 18

#     - name: Install dependencies
#       run: npm ci

#     - name: Run database migrations
#       run: npx knex migrate:latest --knexfile src/config/knex.ts
#       env:
#         DATABASE_URL: postgresql://${{ secrets.PRODUCTION_DATABASE_USER }}:${{ secrets.PRODUCTION_DATABASE_PASSWORD }}@${{ secrets.DEPLOYMENT_HOST }}:${{ secrets.PRODUCTION_DATABASE_PORT }}/${{ secrets.PRODUCTION_DATABASE_NAME }}
